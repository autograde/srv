// Code generated by go-bindata.
// sources:
// assets/html/startup.html
// assets/html/template.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsHtmlStartupHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x4f\x6f\xdb\xc6\x13\x3d\x3b\x40\xbe\xc3\xfc\x78\xc9\xaf\xad\x25\xa1\x2d\x7a\x68\x2a\xa7\x70\x9d\xb6\x31\x10\x24\x46\x95\x1c\x7a\x5c\x92\x43\x69\x91\x25\x97\xd9\x3f\x72\x54\x43\xdf\xbd\x6f\x97\x4b\x91\x8c\x1c\xbb\x2d\x12\x1f\x04\x2c\xf7\xcf\xdb\x99\x37\x33\x6f\x56\x37\x37\x25\x57\xb2\x61\xca\xae\xc4\x9a\xdf\x48\xa7\x38\xdb\xef\x6f\x6e\xe6\xab\x9d\x7d\x25\x6a\xde\xef\x69\x46\x18\x3b\xae\x69\xc5\xce\xb7\x37\x37\xdc\x94\xfb\xfd\xe3\x47\xc3\xc9\x17\x2c\x4a\x85\x11\x0e\x9e\x97\xb5\x6c\xe8\x4a\x34\xac\x6e\xd9\xb8\xf2\xb9\xe3\x0f\x0e\xfb\x12\x62\xa1\x9b\x4a\xae\xbd\x11\x4e\xea\xe6\x96\x03\xb9\x2e\x77\x59\x98\x7a\xfc\xe8\x64\x59\xca\x2d\x15\x4a\x58\x7b\x96\xe1\x9c\x13\xd8\x61\xb2\x67\x58\x99\x2c\x19\x7d\xdd\x4d\x7e\x74\x40\xcd\xea\x72\xf6\xed\x77\x61\x2d\xae\x9e\x2c\xdb\x6e\xdb\xc9\xc9\x9b\x0d\x53\x25\x8d\x75\xe4\x64\xcd\xb4\xd3\x9e\xac\x13\xc6\xd1\x84\x86\x30\x7d\x2d\x95\xa2\x86\xb9\x24\xa7\xc9\xfa\xb6\x55\x3b\x12\x54\xf1\x35\x95\x0c\x83\x94\x4d\x88\x22\xd7\xde\x85\x13\x86\x36\x1a\xb8\xdc\x6c\xa5\xd1\x4d\xcd\x8d\x3b\x25\x87\xeb\x44\xe0\x49\x5a\x07\xcf\xb5\x39\x25\xd1\x94\x71\x7a\x2d\x1d\x19\x6e\xb5\x95\x98\xde\xc5\xb3\xb2\x59\x27\xd0\x11\xc8\x9c\x2e\xbc\x31\x18\xa8\xdd\x29\xe9\x06\x56\xfc\x2e\xdd\x0b\x9f\x93\xb4\xd1\x2c\x6d\x1c\x97\xf3\xe4\xe7\xa2\xbd\xc5\xe7\x5f\xb8\xd2\xa6\xf3\xb5\x10\x4d\xf2\xf7\xc8\x45\xc3\x6b\x18\xc9\x26\x1a\x37\x61\x43\xc0\x77\x59\xc4\xb8\xf5\x3e\xbb\x64\xc4\x4f\xc7\x38\xa5\x06\x02\x6c\xab\x8c\xae\x8f\xfd\x27\x51\x14\xda\xc3\xab\xbb\x0c\x5e\x7a\xd5\x0f\x4f\x96\x4a\x3e\x3b\x2f\x4b\x5a\x0a\xda\x18\xae\xce\xb2\x8d\x73\xad\x7d\xba\x58\x80\xbf\x8d\xcf\xe7\x85\xae\x17\x96\x5d\xe0\xce\x2e\x46\x96\xda\x45\xc3\xc8\x8e\x57\x88\xd7\xf9\x30\xbb\x5c\x88\x67\xcb\x05\x20\xc7\xf0\xbf\x36\xbd\xdb\xb2\x01\x53\x75\xdc\x09\x3e\xde\x7b\x06\x21\x65\xbf\x35\x9a\x35\xc2\xa2\x06\xf4\x3c\x25\x9e\xaf\xe7\x94\x4d\x09\x73\xf4\xb6\x91\x5b\x36\x88\xed\x8e\x74\x45\x2b\x27\xb6\xa2\x59\x23\x87\x97\x8b\x91\x6f\x11\xf1\x85\xae\xb9\x45\x3d\xd2\xdb\x3f\x5e\xf6\x68\xc1\x47\xb8\x38\x80\xbe\xbc\xd8\xef\xe7\xfe\xc3\xdc\x4b\x3b\x6f\xf4\x2d\x28\xe7\xde\x6d\xb4\x91\x7f\x75\x96\x15\x42\xa9\x5c\x14\xef\xfe\x05\xe6\x42\x0b\x40\x4c\x91\xc7\x4c\x0d\x0b\x34\x8e\x1a\x0d\x51\x7b\xa5\x1d\x83\x45\x91\xd2\x7e\xec\x17\xd5\x1e\x95\x91\x73\x28\x20\xaf\x90\xc2\xef\xbd\x50\xb2\x92\xc8\x18\xac\x9e\x82\xf7\x42\xf9\x12\x21\xa4\x64\xe5\xfc\x50\xae\xc8\xa4\xfe\x70\x40\x0d\x65\x12\x78\xa7\xff\x87\x5c\x6a\x08\x30\xc2\x7e\x15\x38\xb6\x6c\xc0\x38\x19\xdf\x34\x01\x28\x6c\x7e\x32\x75\xf6\x49\x02\x6d\x8d\x5e\x1b\x51\xcf\x29\xa2\xa7\x73\xf1\x92\x8d\xd8\x06\x1b\x5b\x9f\x23\xc8\x74\x79\x85\xdc\x2d\x0d\x5b\x7b\x4a\x16\x26\x72\x5f\x79\x31\xdf\x6b\xf1\x8e\x23\xd1\xbd\x10\xb8\x94\xf8\x09\x30\xa9\x86\xfe\x48\x5b\x9e\xa0\x32\x7c\x53\x84\x30\xc1\x76\xb7\x9b\xd3\x6f\xde\xc0\x58\x28\xc3\x78\x5b\xc2\x0c\x49\x28\x61\x41\xe4\x35\xfa\xf4\xe9\x40\x07\x41\x08\x3b\x6c\xa0\x47\xd8\xa3\x20\x24\xc8\x6b\xd4\x4d\xaa\xcb\x12\xfc\x67\x29\xf0\xd4\x0a\xb7\xb9\xb3\x2a\x5f\x07\x06\x42\xb9\x47\x96\x50\x77\xad\x62\xc7\x9d\x98\x41\x04\x31\x87\x6a\x69\x6d\x17\xfd\x0b\x25\x21\x59\x74\xf9\x3c\xea\x5d\xfa\x5a\x71\x61\xd8\x75\xf4\xe5\xdc\x6b\xc9\x16\x62\x2a\x72\xc5\x83\x62\xf4\x34\x33\x44\x2e\xd4\x66\x25\x0a\x9e\xd3\x4a\xd6\x41\x83\x0b\xdd\xee\x88\x45\xb1\x09\x41\xc7\x6e\xcb\xf4\x3a\x90\x02\xc2\xdf\x71\x73\x50\x65\xdc\xda\x0a\x1b\x33\x12\xcd\x07\x30\x3a\x42\x4f\xba\x10\x3a\x81\x62\x88\xaa\x81\xae\xa6\xd5\xba\x0e\x27\x43\x87\xa3\xeb\x0d\x27\xb1\x1c\x74\x79\x52\xe6\xd0\x8a\x78\x6a\xe8\x27\x73\xfa\xf3\x20\x87\xda\x8d\xa4\xb5\xe5\x18\x3e\x44\x08\xc9\x57\x20\xa3\xfa\x60\x8c\xef\x98\xaa\xae\xec\x4c\xaa\xbc\xf3\x86\xef\x0c\xcc\x65\x15\xc3\xd2\xdf\xa6\xf3\xd0\x2f\xe3\xe1\x31\x31\x41\x95\x04\x29\x11\xb5\x0e\xb6\x9e\x76\xba\x20\xab\x21\xa6\x25\xc7\x88\xf6\xf9\xfc\x09\xba\xd6\x60\x52\x3f\xa5\xbb\x74\xb8\xe4\x2d\x2b\xdd\x42\x00\x43\xf8\x13\x9e\x05\x7a\x91\x3a\xe5\x58\x46\x61\x72\x50\x86\x90\x01\x18\x6e\x25\x14\xfb\xd8\xf6\x35\x5c\xba\x8d\x84\xff\xcd\x66\x60\xaa\x45\x07\x0e\xca\x4d\xb3\x59\x22\x65\x19\x3f\xd3\x8b\x20\x8c\x67\xb1\x6a\xc2\x5b\x42\x65\x64\xb4\xe2\x6e\x3a\x43\x43\x0a\x56\x9c\x45\x05\x07\x09\x17\xd1\xe3\x2b\x14\xc3\x7e\x9f\x51\xcd\xa8\xb6\xf2\x2c\xbb\x7a\xbd\x7a\x33\x3c\x27\x26\xcf\x8d\x08\xbe\x36\xda\xb7\xd9\xa8\xab\x88\x9c\x55\x30\xe9\x2c\x0b\x25\x18\xde\x5b\xa8\xc0\x6c\xfc\x44\xb1\xf5\xec\xfb\xc0\xaf\x83\x31\xb3\xb8\x3f\x8b\xbd\x80\xae\x7a\xd1\xfc\x1a\xfa\x1b\xe6\x07\xd8\x8f\x5e\x39\x80\xf8\x21\x1b\xf5\x81\x8e\x08\xb7\x6b\xe1\x5c\x7c\x7c\x4d\x6c\x4c\x77\x65\x94\x44\xa5\x24\x14\xbe\xae\x74\xe1\x6d\x28\x7e\xe4\x45\x93\xba\xeb\xcf\x41\x81\xbf\xc9\x90\x26\x2e\xf0\x74\x19\xd5\x99\x7b\x6d\xce\x62\xe3\x8b\x84\xf5\xbe\x05\xaa\x5a\x85\x2a\xdd\x68\x55\xb2\x99\xac\xc1\x13\x2c\x8f\x7a\x0a\x9c\x18\x9a\x4a\xf7\xf1\x1f\x68\x8d\xaf\x8a\x7b\x09\x3d\x9f\xbc\x3d\xbe\x38\xa1\x07\x62\xe2\xbd\x47\xac\xa0\xd3\xce\xc4\x3a\xd7\xee\xf3\xd3\x51\x44\x85\xbd\x7c\x7e\x2f\x23\x83\x30\x3f\x1c\x1b\x17\xc9\xb8\x23\x42\x92\xd0\x1f\x6c\xfa\x52\xbc\x74\x8d\xe7\x9f\x72\x93\xda\xd4\x43\xf3\xd3\x5d\x7b\x0f\x47\xc9\x93\xcf\xce\x93\x45\x7d\xa0\x58\x5f\xea\xe2\x5e\x96\x56\xdd\x56\xc2\xde\x4e\xc0\x1f\x8e\xa8\xd5\xc1\xca\x40\xd3\x56\x28\x3f\x99\x4f\xaa\xfd\x79\xc8\x39\xf6\x41\x57\x15\x3a\x5c\x24\x24\x7e\xff\x38\xf6\x29\xf7\xce\x85\x66\x16\x9d\xb2\x3e\xaf\xe5\xe0\x56\xee\x1a\xc2\x6f\x86\xbf\xba\xc2\x2b\x44\x2f\x34\x1a\xba\x18\xf7\xd6\xe5\xa2\x03\xb8\xdb\xf6\x6e\x1c\xcc\xed\x1d\x19\x56\x0e\xa3\x7e\x70\xf8\x8f\xfd\x77\x00\x00\x00\xff\xff\x20\x6d\x63\x49\xf8\x0f\x00\x00")

func assetsHtmlStartupHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlStartupHtml,
		"assets/html/startup.html",
	)
}

func assetsHtmlStartupHtml() (*asset, error) {
	bytes, err := assetsHtmlStartupHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/startup.html", size: 4088, mode: os.FileMode(420), modTime: time.Unix(1448956281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHtmlTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x6d\x6f\xdb\x38\x12\xfe\xdc\x03\xee\x3f\xb0\x5a\x60\xed\x14\x96\x64\xa7\x6f\x5b\xbf\x04\xd7\x64\x9b\xde\xe1\x70\x9b\xe2\x36\x07\xec\xa2\x28\x0e\x94\x38\x92\xe9\x50\xa4\x4a\x52\xb6\xb5\xae\xff\xfb\x0d\x25\xdb\x92\xbc\x2a\x92\x0f\x17\x1b\xb1\x48\x3e\xf3\xcc\x70\x66\x38\x43\xed\x76\x0c\x12\x2e\x81\x78\x16\xb2\x5c\x50\x0b\xde\x7e\xff\xd7\xbf\xcc\x9f\xff\x7c\x77\x73\xff\xfb\xa7\x0f\x64\x69\x33\x71\x85\x13\x87\xdf\x67\xf3\x25\x50\x86\x0f\x04\xff\x9e\xcd\x33\xb0\x94\xc4\x4b\xaa\x0d\xd8\x85\x57\xd8\xc4\xff\xc9\xeb\x2e\x2e\xad\xcd\x7d\xf8\x5a\xf0\xf5\xc2\xfb\xcd\xff\xcf\x7b\xff\x46\x65\x39\xb5\x3c\x12\xe0\x91\x58\x49\x0b\x12\x25\xff\xf1\x61\x01\x2c\x85\x33\x59\x49\x33\x58\x78\x6b\x0e\x9b\x5c\x69\xdb\x82\x6f\x38\xb3\xcb\x05\x83\x35\x8f\xc1\xaf\x06\x23\xc2\x25\xb7\x9c\x0a\xdf\xc4\x54\xc0\x62\xe2\xa8\xd0\xdc\x67\x73\xcb\xad\x80\xab\xdd\xee\xb8\x3f\xe2\x7d\xa2\x29\xdc\xbb\x59\x8f\x04\xfb\xfd\x3c\xac\x11\x0e\xee\x74\xcf\x05\x97\x0f\x44\x83\x58\x78\xc6\x96\x02\xcc\x12\x00\x75\x2f\x35\x24\x0b\xcf\xed\xc6\x4c\xc3\x30\xa3\xdb\x98\xc9\x20\x52\xca\x1a\xab\x69\xee\x06\xb1\xca\xc2\xd3\x44\xf8\x32\xb8\x0c\xc6\x61\x6c\x4c\x33\x17\x64\x1c\x51\xc6\x1c\x77\xf9\x24\x4d\xc8\xbc\x32\x41\x2c\x54\xc1\x12\x41\x35\x54\x6a\xe8\x8a\x6e\x43\xc1\xa3\x16\xb9\xcf\x70\x6f\x96\x67\x90\xf3\xf8\x01\x74\xf8\x2a\x18\x9f\xeb\x3f\x83\xb4\xcd\xa9\x3c\x65\x62\xcd\x73\x4b\x8c\x8e\x1b\xf5\x4e\x53\x90\x2a\x95\x0a\xa0\x39\x37\x67\xda\x57\x5f\x0b\xd0\x65\x38\x09\x26\xf8\x3d\x8c\x2a\xda\x15\xb2\xce\xc3\x9a\xf0\xb8\xdb\x3e\xfa\xa7\xfa\x71\x75\xee\xc6\xa7\x2a\x78\xc4\x7d\x99\xca\x30\xa1\x90\x2d\xbc\x0c\xde\xa1\x9e\xc3\xf8\xff\xa8\xe1\x91\x00\xad\x1e\x89\xcf\x99\x15\x4f\x48\x9c\x2a\xe6\x09\x00\x8b\x68\xfc\xf0\xe4\x74\xab\xa5\xf0\x7c\x70\x3c\x64\x1d\xa9\x0a\x4b\x6c\x99\xe3\x51\xb4\xb0\xb5\x61\x6b\x91\x90\xf0\x05\xb9\x3e\xda\x4f\x18\x18\x9e\x4a\x92\xf0\x2d\x18\xf2\x22\x3c\x62\x02\x49\xd7\x11\xd5\xbb\xe3\x98\x90\x8c\xea\x94\x4b\x3f\x52\xd6\xaa\x6c\x4a\xc6\xb3\x66\x29\x52\x9a\x81\xf6\x35\x65\xbc\x30\xed\xa5\xfd\x71\xf7\x48\x18\x59\xe9\xa7\x5a\x15\x39\x69\x91\x32\x6e\xf0\x80\x97\x53\x92\x08\xd8\xf6\x8a\x59\x8a\x55\xc7\xd7\x60\x72\x25\x0d\x5f\x43\x5b\x5a\xad\x41\x27\x42\x6d\x7c\x24\x58\x73\xe3\xea\x13\x79\xce\x33\x57\x78\xa8\xb4\x7d\x74\x7f\xcb\x80\x71\x4a\x30\x36\x00\x92\x50\xc9\xc8\x10\x23\x56\x97\xa3\x29\x79\xf7\xee\x32\xdf\x5e\xb4\x14\x04\x7a\xc3\xfc\x48\x03\x7d\x20\xbb\xc6\x56\xa9\x24\xcc\x1c\xeb\x89\xfe\x80\x4e\x45\x99\x2f\x7d\x17\x0d\x5f\xa4\x6d\x43\x73\xca\x18\x97\xe9\x94\x4c\xc6\xf9\x76\xd6\xb3\xfd\x48\xa8\xf8\xa1\xb5\x90\x60\xd5\xf4\x13\x9a\x71\x51\x4e\xbd\xdb\x43\x88\xbd\x73\x80\xe1\x7f\xc0\x94\xbc\x79\xd5\xe1\xc4\x8c\x01\x7f\x09\x3c\x5d\x5a\xd4\x37\x7b\xc4\xca\x69\x04\x89\xd2\x1d\xaf\x7e\x9f\xfa\x90\x02\x02\x12\x7b\x16\xe5\x03\xf5\xb5\x56\x32\xee\x90\xc5\x4a\x28\x3d\x25\x3f\xc4\xec\x6d\xf2\xf2\xb2\x47\xe4\x57\x2e\x30\x8a\xbd\x22\x63\xf7\xe9\x11\xf9\xa8\x04\xeb\xc1\x27\x09\x7b\x3b\xee\xc3\x7f\x72\xfe\x93\x45\xd6\x23\x03\xaf\xe1\x15\xf4\x99\x75\x27\xcb\x6d\x0f\x7e\x9c\xb8\xcf\x39\x1e\x0f\xbb\x3b\x70\x55\xab\x0d\x0f\xbd\xf6\xd9\x3c\x52\xac\x3c\x1d\xff\xdd\x8e\x27\x98\x38\x16\x99\x73\xcb\x95\xa4\xe2\xef\x88\x73\xb1\xda\x9f\x94\xce\x9f\xfb\x3e\x71\xd3\xe8\x0f\xdf\x3f\x1d\xd7\x39\xe3\x6b\x12\x0b\x6a\xcc\xc2\x5b\x15\x19\x1e\x40\xf4\x72\x73\x9a\xbb\x00\xd7\x6e\x29\xb2\xea\x36\xa0\x0b\xd1\x6a\xd3\x5d\x3c\x67\x10\x7e\xc6\xfc\xc9\xe5\x39\x08\x61\xcb\x49\xa7\x29\x1f\xb7\x70\xe8\xc9\xb8\xfa\x27\x89\xfc\x6a\xce\x3b\x32\xbf\x16\x91\xab\x48\x07\x11\x8e\x85\x32\x3f\x37\x26\x44\x6b\xba\xd6\x9f\xcd\x74\xc7\xed\xd1\x6e\x07\x92\xed\xf7\x8d\xd7\x1b\xc5\x2e\x1c\x95\xd6\x53\x45\x76\xee\xbe\xbd\xbb\xbb\xff\xf0\xef\xc6\xdd\xf3\x04\x2b\x23\xe8\x5e\xe7\xf7\xfa\x76\xbe\xd4\xed\x51\x7e\x04\xe7\x85\x10\xbe\x76\xa7\x10\x9b\x01\x3d\x54\xec\x1f\xbc\xab\x6b\xac\xf0\xc4\x2a\xfc\xe6\xf3\x90\x9e\x6d\x1f\xdd\xf5\x63\xac\xf2\x72\x46\x2e\xc7\x93\xd7\x98\x0b\xee\x96\x77\x5b\xe8\xc2\x55\xdd\x43\xc1\x72\x93\xe4\x5f\x80\x7e\x4f\xc9\x8f\x19\x67\x4c\xd9\x19\x39\x69\xc0\xf4\x13\x79\x98\x6b\xbe\xa6\x71\xe9\x5d\x7d\xaa\x1f\x9c\xa6\xef\x82\x71\xbb\x19\x76\x87\x7b\xf7\xd3\x6b\xd2\x47\x57\x30\x0c\x89\xca\x46\xd2\x35\x52\xec\xa3\x55\x29\x71\x95\xa4\xbe\x64\x78\x57\xdd\x09\xc7\xd6\x30\xdd\xa2\xfb\x48\x0a\xe8\x3f\x8c\x07\xeb\xa3\xdb\x6c\x36\x41\xd3\xcf\x54\xe6\x5d\xb5\x47\xd5\x26\x0a\xe9\x4e\xc7\xb9\x20\x96\x73\xc4\xad\x01\x51\x99\xd3\xad\x74\x8a\x9d\x3c\x06\x69\x00\x7b\x75\x89\x17\x92\x31\x1a\x77\x73\x43\xae\x7f\x77\x2c\x01\xb9\x5f\x02\xa1\x85\x5d\x2a\x6d\x08\xf6\xff\x69\xbf\x29\xd8\x24\x72\xfe\x50\x5b\x72\x5b\x0f\x9c\xf8\xa8\x17\x8d\x37\x58\x63\xb8\xa2\xf6\x0f\x90\xbc\x96\x79\x5f\x4f\x91\xf7\xd5\x5c\xa5\xb9\xed\xdc\x76\xe2\xce\xc3\x53\xe2\x1d\x26\x5c\xe2\x71\xb6\xf0\x8e\xd7\x82\x26\xe9\xfe\x14\x05\xa5\xb0\xa8\x23\x01\x06\x30\x4c\xca\x7f\x8e\x93\xb7\x6f\x5f\xfe\x76\xe3\x11\x8b\xf5\xda\xdd\xf1\xff\x1b\x09\x2a\x91\xe0\x48\xd5\xc4\xa5\x63\x82\x3b\x0f\x1f\xab\x6b\x23\x26\x1a\x15\x25\x7a\xde\xb4\x4e\x46\xe7\x5a\x45\xc8\x30\x29\x64\xec\x4a\xd9\x90\x8f\xcc\x48\x8d\xd2\x91\x1e\xd1\x51\x76\xb1\xe3\x9f\x07\x35\xcb\xfb\x23\xc9\x5d\xb4\x82\xd8\x0e\xbe\x2c\xf4\x8c\x7f\xd6\x5f\x16\xee\xdf\xb7\x6f\x27\xf9\xa6\xe3\x0e\xdd\x4a\xf0\x75\x51\xff\x7c\xfb\xf6\xf9\xcb\x45\x90\x17\x66\x39\xc4\x8d\x14\xee\x96\x67\x2e\xf6\xa3\x6a\x51\x2c\x26\x2f\x24\x6c\xc8\xcf\x98\x4b\xc3\x8b\x19\x5d\x60\xc2\xb9\x24\x80\x0f\x02\x1c\x70\xa8\x2e\x46\x47\xd6\x0c\x17\xd1\x0f\x87\x15\x73\x5d\xde\xd3\xf4\x17\x7c\x4d\x41\xcc\xe7\xf1\x97\x19\x0d\xa8\x29\x65\xbc\x98\xe0\x93\xbb\x25\xa6\xb3\x2c\xc8\x31\x29\xa4\xfd\x45\x31\x08\x38\x26\x91\xb6\xd7\x55\x9b\x1c\xba\x0d\x9e\x8a\xff\xc5\x70\xc3\x25\x53\x9b\x11\x53\x71\x65\xdd\x68\x50\xfb\x68\x30\x1a\xd4\x39\x51\x5f\xc2\xfd\x93\x37\xeb\x7b\xe6\x69\xb4\x32\x88\x4c\xe9\xe0\x62\xd6\xdc\x50\x52\x3a\x1c\xd4\x3b\x19\x8c\xc8\x00\xdf\xbd\x5e\xff\xf4\xe6\xf5\x9b\xc9\xf8\xa5\x3f\x71\x13\x98\xb4\xaa\xc2\x37\x68\x83\x25\xcf\x2d\xe5\xf8\x8a\xe4\xde\xbb\x4e\xcb\x9d\x9b\xf0\x3c\x3c\xf4\x23\xac\xd3\xf5\x6b\xe1\xa9\x56\xfe\x2f\x00\x00\xff\xff\xee\xab\xc2\xdd\x50\x0e\x00\x00")

func assetsHtmlTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlTemplateHtml,
		"assets/html/template.html",
	)
}

func assetsHtmlTemplateHtml() (*asset, error) {
	bytes, err := assetsHtmlTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/template.html", size: 3664, mode: os.FileMode(420), modTime: time.Unix(1448902238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/html/startup.html": assetsHtmlStartupHtml,
	"assets/html/template.html": assetsHtmlTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"startup.html": &bintree{assetsHtmlStartupHtml, map[string]*bintree{}},
			"template.html": &bintree{assetsHtmlTemplateHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

